service: sample

provider:
  name: aws
  region: ap-northeast-1
  runtime: provided
  vpc:
    securityGroupIds:
      - sg-06b5891899b8a8522 # prd-giftee-goto-bastion
    subnetIds:
      - subnet-0b76a0356c298dbcc # prd-giftee-goto-protected-c
      - subnet-0d0c54eec45c698cd # prd-giftee-goto-protected-d

plugins:
  - ./vendor/bref/bref

package:
  exclude:
    - node_modules/**
    - public/storage
    - resources/assets/**
    - storage/**
    - tests/**

functions:
  website:
    handler: public/index.php
    timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
    layers:
      - ${bref:layer.php-74-fpm}
    events:
      -   http: 'ANY /'
      -   http: 'ANY /{proxy+}'
  artisan:
    handler: artisan
    timeout: 120 # in seconds
    layers:
      - ${bref:layer.php-74} # PHP
      - ${bref:layer.console} # The "console" layer
    events:
      - schedule:
          rate: rate(1 minute) # see https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html
          input: '"schedule:run"' # artisan commands

resources:
  Resources:
      # The S3 bucket that stores the assets
      Assets:
          Type: AWS::S3::Bucket
          Properties:
              BucketName: sample-dev-assets
      # The policy that makes the bucket publicly readable
      AssetsBucketPolicy:
          Type: AWS::S3::BucketPolicy
          Properties:
              Bucket: !Ref Assets # References the bucket we defined above
              PolicyDocument:
                  Statement:
                      -   Effect: Allow
                          Principal: '*' # everyone
                          Action: 's3:GetObject' # to read
                          Resource: !Join ['/', [!GetAtt Assets.Arn, '*']] # things in the bucket
                          # alternatively you can write out Resource: 'arn:aws:s3:::<bucket-name>/*'
      WebsiteCDN:
        Type: AWS::CloudFront::Distribution
        Properties:
            DistributionConfig:
                Enabled: true
                # Cheapest option by default (https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_DistributionConfig.html)
                PriceClass: PriceClass_100
                # Enable http2 transfer for better performances
                HttpVersion: http2
                # Origins are where CloudFront fetches content
                Origins:
                    # The website (AWS Lambda)
                    -   Id: Website
                        DomainName: !Join ['.', [!Ref ApiGatewayRestApi, 'execute-api', !Ref AWS::Region, 'amazonaws.com']]
                        # This is the stage
                        OriginPath: "/${opt:stage, 'dev'}"
                        CustomOriginConfig:
                            OriginProtocolPolicy: 'https-only' # API Gateway only supports HTTPS
                    # The assets (S3)
                    -   Id: Assets
                        DomainName: !GetAtt Assets.RegionalDomainName
                        S3OriginConfig: {} # this key is required to tell CloudFront that this is an S3 origin, even though nothing is configured
                        # If you host a static website, like a SPA, use s3-website URLs instead of the config above
                        # See https://stackoverflow.com/questions/15309113/amazon-cloudfront-doesnt-respect-my-s3-website-buckets-index-html-rules#15528757
                        # DomainName: !Select [2, !Split ["/", !GetAtt Assets.WebsiteURL]]
                        # CustomOriginConfig:
                        #     OriginProtocolPolicy: 'http-only' # S3 websites only support HTTP
                        # You'll also need to enable website hosting on your s3 bucket by configuring the WebsiteConfiguration property
                        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html#cfn-s3-bucket-websiteconfiguration
                # The default behavior is to send everything to AWS Lambda
                DefaultCacheBehavior:
                    AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
                    TargetOriginId: Website # the PHP application
                    # Disable caching for the PHP application https://aws.amazon.com/premiumsupport/knowledge-center/prevent-cloudfront-from-caching-files/
                    DefaultTTL: 0
                    MinTTL: 0
                    MaxTTL: 0
                    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-forwardedvalues.html
                    ForwardedValues:
                        QueryString: true
                        Cookies:
                            Forward: all # Forward cookies to use them in PHP
                        # We must *not* forward the `Host` header else it messes up API Gateway
                        Headers:
                            - 'Accept'
                            - 'Accept-Language'
                            - 'Origin'
                            - 'Referer'
                    ViewerProtocolPolicy: redirect-to-https
                CacheBehaviors:
                    # Assets will be served under the `/assets/` prefix
                    -   PathPattern: 'assets/*'
                        TargetOriginId: Assets # the static files on S3
                        AllowedMethods: [GET, HEAD]
                        ForwardedValues:
                            # No need for all that with assets
                            QueryString: 'false'
                            Cookies:
                                Forward: none
                        ViewerProtocolPolicy: redirect-to-https
                        Compress: true # Serve files with gzip for browsers that support it (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html)
                CustomErrorResponses:
                    # Do not cache HTTP errors
                    -   ErrorCode: 500
                        ErrorCachingMinTTL: 0
                    -   ErrorCode: 504
                        ErrorCachingMinTTL: 0